// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/property.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/property.go -destination=internal/mocks/mock_property_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "real-estate-manager/backend/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPropertyRepository is a mock of PropertyRepository interface.
type MockPropertyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPropertyRepositoryMockRecorder
	isgomock struct{}
}

// MockPropertyRepositoryMockRecorder is the mock recorder for MockPropertyRepository.
type MockPropertyRepositoryMockRecorder struct {
	mock *MockPropertyRepository
}

// NewMockPropertyRepository creates a new mock instance.
func NewMockPropertyRepository(ctrl *gomock.Controller) *MockPropertyRepository {
	mock := &MockPropertyRepository{ctrl: ctrl}
	mock.recorder = &MockPropertyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPropertyRepository) EXPECT() *MockPropertyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPropertyRepository) Create(ctx context.Context, property *models.Property) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, property)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPropertyRepositoryMockRecorder) Create(ctx, property any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPropertyRepository)(nil).Create), ctx, property)
}

// Delete mocks base method.
func (m *MockPropertyRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPropertyRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPropertyRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockPropertyRepository) GetAll(ctx context.Context) ([]models.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]models.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPropertyRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPropertyRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockPropertyRepository) GetByID(ctx context.Context, id int) (*models.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPropertyRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPropertyRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockPropertyRepository) Update(ctx context.Context, property *models.Property) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, property)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPropertyRepositoryMockRecorder) Update(ctx, property any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPropertyRepository)(nil).Update), ctx, property)
}
